seed: 42
debug_dataflow: True

datafiles:
    data_dirs: {
        'data/science-challenge-master-data/negative': 'negative',
        'data/science-challenge-master-data/positive': 'positive',
        'data/science-challenge-master-data/neutral': 'neutral'
        }
    kwargs: 
        names: ['text']

data_processing:
    tokenizer:
        object: custom_tokenizers.CharTokenizer
        kwargs: 
            vocab_size: 250
            return_tensors: 'pt'

    train_size: 0.6
    val_size: 0.2
    test_size: 0.2

hyperparameters:
    backbone:
        object: architectures.simple_embedding.JustEmbeddingEncoder
        required_args: {'input_ids'}
        kwargs: 
            embedding_dim: 256
            
    classifier_head:
        num_layers: 1

    batch_size: 64
    pin_memory: True
    freeze_encoder: 0
    num_classes: 3
    num_workers: 0

    optimizer:
        object: torch.optim.AdamW
        lr:
            backbone: 1e-4
            head: 1e-4

    # scheduler:
    #     # object: transformers.get_linear_schedule_with_warmup
    #     object: torch.optim.lr_scheduler.ExponentialLR
    #     kwargs:
    #         num_warmup_steps: 0
    #         # step_size: 1.0
    #         gamma: 0.6
    #         # eta_min: 1e-5
    #         interval: 'epoch'
    #         frequency: 1

    trainer:
        accelerator: 'auto'
        enable_progress_bar: False
        precision: '16-mixed'
        max_epochs: 250
        profiler: 'simple'
        log_every_n_steps: 15

loggers:
    wandb_logger:
        object: lightning.pytorch.loggers.WandbLogger
        kwargs:
            project: 'wandb-sentiment-analysis'
            offline: False

callbacks:

    slack_callback: True

    print_table_metrics_callback: True

    learning_rate_monitor: 
        object: lightning.pytorch.callbacks.LearningRateMonitor
        kwargs:
            logging_interval: 'step'
    
    # early_stopping_callback:
    #     object: lightning.pytorch.callbacks.EarlyStopping
    #     kwargs:
    #         patience: 5
    #         verbose: True
    #         min_delta: 0.005
    #         monitor: 'val_loss'

    checkpoint_callback:
        object: lightning.pytorch.callbacks.ModelCheckpoint
        kwargs:
            save_top_k: 2
            monitor: 'val_loss'

